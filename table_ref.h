//MIT License

//Copyright (c) 2021 OnlyloveSY

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
// Generated by the convert compiler.  DO NOT EDIT!
#pragma once
#include "libref.hpp"

//===================================== Begin1 ============================================
#define TABLE_STRUCT_DEF_1(StructName,FilePath,delimiters,T1_1,T1_2,T1_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
{}\
T1_1 T1_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
return p;\
}\
}\
}\
};

//===================================== Begin2 ============================================
#define TABLE_STRUCT_DEF_2(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
return p;\
}\
}\
}\
};

//===================================== Begin3 ============================================
#define TABLE_STRUCT_DEF_3(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
return p;\
}\
}\
}\
};

//===================================== Begin4 ============================================
#define TABLE_STRUCT_DEF_4(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
return p;\
}\
}\
}\
};

//===================================== Begin5 ============================================
#define TABLE_STRUCT_DEF_5(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
return p;\
}\
}\
}\
};

//===================================== Begin6 ============================================
#define TABLE_STRUCT_DEF_6(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
return p;\
}\
}\
}\
};

//===================================== Begin7 ============================================
#define TABLE_STRUCT_DEF_7(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
return p;\
}\
}\
}\
};

//===================================== Begin8 ============================================
#define TABLE_STRUCT_DEF_8(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
return p;\
}\
}\
}\
};

//===================================== Begin9 ============================================
#define TABLE_STRUCT_DEF_9(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
return p;\
}\
}\
}\
};

//===================================== Begin10 ============================================
#define TABLE_STRUCT_DEF_10(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
return p;\
}\
}\
}\
};

//===================================== Begin11 ============================================
#define TABLE_STRUCT_DEF_11(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
return p;\
}\
}\
}\
};

//===================================== Begin12 ============================================
#define TABLE_STRUCT_DEF_12(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
return p;\
}\
}\
}\
};

//===================================== Begin13 ============================================
#define TABLE_STRUCT_DEF_13(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
return p;\
}\
}\
}\
};

//===================================== Begin14 ============================================
#define TABLE_STRUCT_DEF_14(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
return p;\
}\
}\
}\
};

//===================================== Begin15 ============================================
#define TABLE_STRUCT_DEF_15(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
return p;\
}\
}\
}\
};

//===================================== Begin16 ============================================
#define TABLE_STRUCT_DEF_16(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
return p;\
}\
}\
}\
};

//===================================== Begin17 ============================================
#define TABLE_STRUCT_DEF_17(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
return p;\
}\
}\
}\
};

//===================================== Begin18 ============================================
#define TABLE_STRUCT_DEF_18(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
return p;\
}\
}\
}\
};

//===================================== Begin19 ============================================
#define TABLE_STRUCT_DEF_19(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
return p;\
}\
}\
}\
};

//===================================== Begin20 ============================================
#define TABLE_STRUCT_DEF_20(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
return p;\
}\
}\
}\
};

//===================================== Begin21 ============================================
#define TABLE_STRUCT_DEF_21(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
return p;\
}\
}\
}\
};

//===================================== Begin22 ============================================
#define TABLE_STRUCT_DEF_22(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
return p;\
}\
}\
}\
};

//===================================== Begin23 ============================================
#define TABLE_STRUCT_DEF_23(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
return p;\
}\
}\
}\
};

//===================================== Begin24 ============================================
#define TABLE_STRUCT_DEF_24(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
return p;\
}\
}\
}\
};

//===================================== Begin25 ============================================
#define TABLE_STRUCT_DEF_25(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
return p;\
}\
}\
}\
};

//===================================== Begin26 ============================================
#define TABLE_STRUCT_DEF_26(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
return p;\
}\
}\
}\
};

//===================================== Begin27 ============================================
#define TABLE_STRUCT_DEF_27(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
return p;\
}\
}\
}\
};

//===================================== Begin28 ============================================
#define TABLE_STRUCT_DEF_28(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
return p;\
}\
}\
}\
};

//===================================== Begin29 ============================================
#define TABLE_STRUCT_DEF_29(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
return p;\
}\
}\
}\
};

//===================================== Begin30 ============================================
#define TABLE_STRUCT_DEF_30(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
return p;\
}\
}\
}\
};

//===================================== Begin31 ============================================
#define TABLE_STRUCT_DEF_31(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3,T31_1,T31_2,T31_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
,T31_2(INIT(T31_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
T31_1 T31_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
p->Register(&StructName::T31_2,T31_3);\
return p;\
}\
}\
}\
};

//===================================== Begin32 ============================================
#define TABLE_STRUCT_DEF_32(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3,T31_1,T31_2,T31_3,T32_1,T32_2,T32_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
,T31_2(INIT(T31_1))\
,T32_2(INIT(T32_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
T31_1 T31_2;\
T32_1 T32_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
p->Register(&StructName::T31_2,T31_3);\
p->Register(&StructName::T32_2,T32_3);\
return p;\
}\
}\
}\
};

//===================================== Begin33 ============================================
#define TABLE_STRUCT_DEF_33(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3,T31_1,T31_2,T31_3,T32_1,T32_2,T32_3,T33_1,T33_2,T33_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
,T31_2(INIT(T31_1))\
,T32_2(INIT(T32_1))\
,T33_2(INIT(T33_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
T31_1 T31_2;\
T32_1 T32_2;\
T33_1 T33_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
p->Register(&StructName::T31_2,T31_3);\
p->Register(&StructName::T32_2,T32_3);\
p->Register(&StructName::T33_2,T33_3);\
return p;\
}\
}\
}\
};

//===================================== Begin34 ============================================
#define TABLE_STRUCT_DEF_34(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3,T31_1,T31_2,T31_3,T32_1,T32_2,T32_3,T33_1,T33_2,T33_3,T34_1,T34_2,T34_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
,T31_2(INIT(T31_1))\
,T32_2(INIT(T32_1))\
,T33_2(INIT(T33_1))\
,T34_2(INIT(T34_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
T31_1 T31_2;\
T32_1 T32_2;\
T33_1 T33_2;\
T34_1 T34_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
p->Register(&StructName::T31_2,T31_3);\
p->Register(&StructName::T32_2,T32_3);\
p->Register(&StructName::T33_2,T33_3);\
p->Register(&StructName::T34_2,T34_3);\
return p;\
}\
}\
}\
};

//===================================== Begin35 ============================================
#define TABLE_STRUCT_DEF_35(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3,T31_1,T31_2,T31_3,T32_1,T32_2,T32_3,T33_1,T33_2,T33_3,T34_1,T34_2,T34_3,T35_1,T35_2,T35_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
,T31_2(INIT(T31_1))\
,T32_2(INIT(T32_1))\
,T33_2(INIT(T33_1))\
,T34_2(INIT(T34_1))\
,T35_2(INIT(T35_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
T31_1 T31_2;\
T32_1 T32_2;\
T33_1 T33_2;\
T34_1 T34_2;\
T35_1 T35_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
p->Register(&StructName::T31_2,T31_3);\
p->Register(&StructName::T32_2,T32_3);\
p->Register(&StructName::T33_2,T33_3);\
p->Register(&StructName::T34_2,T34_3);\
p->Register(&StructName::T35_2,T35_3);\
return p;\
}\
}\
}\
};

//===================================== Begin36 ============================================
#define TABLE_STRUCT_DEF_36(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3,T31_1,T31_2,T31_3,T32_1,T32_2,T32_3,T33_1,T33_2,T33_3,T34_1,T34_2,T34_3,T35_1,T35_2,T35_3,T36_1,T36_2,T36_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
,T31_2(INIT(T31_1))\
,T32_2(INIT(T32_1))\
,T33_2(INIT(T33_1))\
,T34_2(INIT(T34_1))\
,T35_2(INIT(T35_1))\
,T36_2(INIT(T36_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
T31_1 T31_2;\
T32_1 T32_2;\
T33_1 T33_2;\
T34_1 T34_2;\
T35_1 T35_2;\
T36_1 T36_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
p->Register(&StructName::T31_2,T31_3);\
p->Register(&StructName::T32_2,T32_3);\
p->Register(&StructName::T33_2,T33_3);\
p->Register(&StructName::T34_2,T34_3);\
p->Register(&StructName::T35_2,T35_3);\
p->Register(&StructName::T36_2,T36_3);\
return p;\
}\
}\
}\
};

//===================================== Begin37 ============================================
#define TABLE_STRUCT_DEF_37(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3,T31_1,T31_2,T31_3,T32_1,T32_2,T32_3,T33_1,T33_2,T33_3,T34_1,T34_2,T34_3,T35_1,T35_2,T35_3,T36_1,T36_2,T36_3,T37_1,T37_2,T37_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
,T31_2(INIT(T31_1))\
,T32_2(INIT(T32_1))\
,T33_2(INIT(T33_1))\
,T34_2(INIT(T34_1))\
,T35_2(INIT(T35_1))\
,T36_2(INIT(T36_1))\
,T37_2(INIT(T37_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
T31_1 T31_2;\
T32_1 T32_2;\
T33_1 T33_2;\
T34_1 T34_2;\
T35_1 T35_2;\
T36_1 T36_2;\
T37_1 T37_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
p->Register(&StructName::T31_2,T31_3);\
p->Register(&StructName::T32_2,T32_3);\
p->Register(&StructName::T33_2,T33_3);\
p->Register(&StructName::T34_2,T34_3);\
p->Register(&StructName::T35_2,T35_3);\
p->Register(&StructName::T36_2,T36_3);\
p->Register(&StructName::T37_2,T37_3);\
return p;\
}\
}\
}\
};

//===================================== Begin38 ============================================
#define TABLE_STRUCT_DEF_38(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3,T31_1,T31_2,T31_3,T32_1,T32_2,T32_3,T33_1,T33_2,T33_3,T34_1,T34_2,T34_3,T35_1,T35_2,T35_3,T36_1,T36_2,T36_3,T37_1,T37_2,T37_3,T38_1,T38_2,T38_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
,T31_2(INIT(T31_1))\
,T32_2(INIT(T32_1))\
,T33_2(INIT(T33_1))\
,T34_2(INIT(T34_1))\
,T35_2(INIT(T35_1))\
,T36_2(INIT(T36_1))\
,T37_2(INIT(T37_1))\
,T38_2(INIT(T38_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
T31_1 T31_2;\
T32_1 T32_2;\
T33_1 T33_2;\
T34_1 T34_2;\
T35_1 T35_2;\
T36_1 T36_2;\
T37_1 T37_2;\
T38_1 T38_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
p->Register(&StructName::T31_2,T31_3);\
p->Register(&StructName::T32_2,T32_3);\
p->Register(&StructName::T33_2,T33_3);\
p->Register(&StructName::T34_2,T34_3);\
p->Register(&StructName::T35_2,T35_3);\
p->Register(&StructName::T36_2,T36_3);\
p->Register(&StructName::T37_2,T37_3);\
p->Register(&StructName::T38_2,T38_3);\
return p;\
}\
}\
}\
};

//===================================== Begin39 ============================================
#define TABLE_STRUCT_DEF_39(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3,T31_1,T31_2,T31_3,T32_1,T32_2,T32_3,T33_1,T33_2,T33_3,T34_1,T34_2,T34_3,T35_1,T35_2,T35_3,T36_1,T36_2,T36_3,T37_1,T37_2,T37_3,T38_1,T38_2,T38_3,T39_1,T39_2,T39_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
,T31_2(INIT(T31_1))\
,T32_2(INIT(T32_1))\
,T33_2(INIT(T33_1))\
,T34_2(INIT(T34_1))\
,T35_2(INIT(T35_1))\
,T36_2(INIT(T36_1))\
,T37_2(INIT(T37_1))\
,T38_2(INIT(T38_1))\
,T39_2(INIT(T39_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
T31_1 T31_2;\
T32_1 T32_2;\
T33_1 T33_2;\
T34_1 T34_2;\
T35_1 T35_2;\
T36_1 T36_2;\
T37_1 T37_2;\
T38_1 T38_2;\
T39_1 T39_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
p->Register(&StructName::T31_2,T31_3);\
p->Register(&StructName::T32_2,T32_3);\
p->Register(&StructName::T33_2,T33_3);\
p->Register(&StructName::T34_2,T34_3);\
p->Register(&StructName::T35_2,T35_3);\
p->Register(&StructName::T36_2,T36_3);\
p->Register(&StructName::T37_2,T37_3);\
p->Register(&StructName::T38_2,T38_3);\
p->Register(&StructName::T39_2,T39_3);\
return p;\
}\
}\
}\
};

//===================================== Begin40 ============================================
#define TABLE_STRUCT_DEF_40(StructName,FilePath,delimiters,T1_1,T1_2,T1_3,T2_1,T2_2,T2_3,T3_1,T3_2,T3_3,T4_1,T4_2,T4_3,T5_1,T5_2,T5_3,T6_1,T6_2,T6_3,T7_1,T7_2,T7_3,T8_1,T8_2,T8_3,T9_1,T9_2,T9_3,T10_1,T10_2,T10_3,T11_1,T11_2,T11_3,T12_1,T12_2,T12_3,T13_1,T13_2,T13_3,T14_1,T14_2,T14_3,T15_1,T15_2,T15_3,T16_1,T16_2,T16_3,T17_1,T17_2,T17_3,T18_1,T18_2,T18_3,T19_1,T19_2,T19_3,T20_1,T20_2,T20_3,T21_1,T21_2,T21_3,T22_1,T22_2,T22_3,T23_1,T23_2,T23_3,T24_1,T24_2,T24_3,T25_1,T25_2,T25_3,T26_1,T26_2,T26_3,T27_1,T27_2,T27_3,T28_1,T28_2,T28_3,T29_1,T29_2,T29_3,T30_1,T30_2,T30_3,T31_1,T31_2,T31_3,T32_1,T32_2,T32_3,T33_1,T33_2,T33_3,T34_1,T34_2,T34_3,T35_1,T35_2,T35_3,T36_1,T36_2,T36_3,T37_1,T37_2,T37_3,T38_1,T38_2,T38_3,T39_1,T39_2,T39_3,T40_1,T40_2,T40_3)\
struct StructName;\
std::shared_ptr<StructValueConverter<StructName>> pref_##StructName##_config_ = std::make_shared<StructValueConverter<StructName>>(FilePath, delimiters);\
struct StructName {\
StructName():\
T1_2(INIT(T1_1))\
,T2_2(INIT(T2_1))\
,T3_2(INIT(T3_1))\
,T4_2(INIT(T4_1))\
,T5_2(INIT(T5_1))\
,T6_2(INIT(T6_1))\
,T7_2(INIT(T7_1))\
,T8_2(INIT(T8_1))\
,T9_2(INIT(T9_1))\
,T10_2(INIT(T10_1))\
,T11_2(INIT(T11_1))\
,T12_2(INIT(T12_1))\
,T13_2(INIT(T13_1))\
,T14_2(INIT(T14_1))\
,T15_2(INIT(T15_1))\
,T16_2(INIT(T16_1))\
,T17_2(INIT(T17_1))\
,T18_2(INIT(T18_1))\
,T19_2(INIT(T19_1))\
,T20_2(INIT(T20_1))\
,T21_2(INIT(T21_1))\
,T22_2(INIT(T22_1))\
,T23_2(INIT(T23_1))\
,T24_2(INIT(T24_1))\
,T25_2(INIT(T25_1))\
,T26_2(INIT(T26_1))\
,T27_2(INIT(T27_1))\
,T28_2(INIT(T28_1))\
,T29_2(INIT(T29_1))\
,T30_2(INIT(T30_1))\
,T31_2(INIT(T31_1))\
,T32_2(INIT(T32_1))\
,T33_2(INIT(T33_1))\
,T34_2(INIT(T34_1))\
,T35_2(INIT(T35_1))\
,T36_2(INIT(T36_1))\
,T37_2(INIT(T37_1))\
,T38_2(INIT(T38_1))\
,T39_2(INIT(T39_1))\
,T40_2(INIT(T40_1))\
{}\
T1_1 T1_2;\
T2_1 T2_2;\
T3_1 T3_2;\
T4_1 T4_2;\
T5_1 T5_2;\
T6_1 T6_2;\
T7_1 T7_2;\
T8_1 T8_2;\
T9_1 T9_2;\
T10_1 T10_2;\
T11_1 T11_2;\
T12_1 T12_2;\
T13_1 T13_2;\
T14_1 T14_2;\
T15_1 T15_2;\
T16_1 T16_2;\
T17_1 T17_2;\
T18_1 T18_2;\
T19_1 T19_2;\
T20_1 T20_2;\
T21_1 T21_2;\
T22_1 T22_2;\
T23_1 T23_2;\
T24_1 T24_2;\
T25_1 T25_2;\
T26_1 T26_2;\
T27_1 T27_2;\
T28_1 T28_2;\
T29_1 T29_2;\
T30_1 T30_2;\
T31_1 T31_2;\
T32_1 T32_2;\
T33_1 T33_2;\
T34_1 T34_2;\
T35_1 T35_2;\
T36_1 T36_2;\
T37_1 T37_2;\
T38_1 T38_2;\
T39_1 T39_2;\
T40_1 T40_2;\
~StructName() {}\
static StructValueConverter<StructName>* GetTablePtr(){\
StructValueConverter<StructName>* p =  pref_##StructName##_config_.get();\
if (p == nullptr) { return nullptr; } \
else {\
if(!p->IsEmpty()){return p;}\
else {\
p->Register(&StructName::T1_2,T1_3);\
p->Register(&StructName::T2_2,T2_3);\
p->Register(&StructName::T3_2,T3_3);\
p->Register(&StructName::T4_2,T4_3);\
p->Register(&StructName::T5_2,T5_3);\
p->Register(&StructName::T6_2,T6_3);\
p->Register(&StructName::T7_2,T7_3);\
p->Register(&StructName::T8_2,T8_3);\
p->Register(&StructName::T9_2,T9_3);\
p->Register(&StructName::T10_2,T10_3);\
p->Register(&StructName::T11_2,T11_3);\
p->Register(&StructName::T12_2,T12_3);\
p->Register(&StructName::T13_2,T13_3);\
p->Register(&StructName::T14_2,T14_3);\
p->Register(&StructName::T15_2,T15_3);\
p->Register(&StructName::T16_2,T16_3);\
p->Register(&StructName::T17_2,T17_3);\
p->Register(&StructName::T18_2,T18_3);\
p->Register(&StructName::T19_2,T19_3);\
p->Register(&StructName::T20_2,T20_3);\
p->Register(&StructName::T21_2,T21_3);\
p->Register(&StructName::T22_2,T22_3);\
p->Register(&StructName::T23_2,T23_3);\
p->Register(&StructName::T24_2,T24_3);\
p->Register(&StructName::T25_2,T25_3);\
p->Register(&StructName::T26_2,T26_3);\
p->Register(&StructName::T27_2,T27_3);\
p->Register(&StructName::T28_2,T28_3);\
p->Register(&StructName::T29_2,T29_3);\
p->Register(&StructName::T30_2,T30_3);\
p->Register(&StructName::T31_2,T31_3);\
p->Register(&StructName::T32_2,T32_3);\
p->Register(&StructName::T33_2,T33_3);\
p->Register(&StructName::T34_2,T34_3);\
p->Register(&StructName::T35_2,T35_3);\
p->Register(&StructName::T36_2,T36_3);\
p->Register(&StructName::T37_2,T37_3);\
p->Register(&StructName::T38_2,T38_3);\
p->Register(&StructName::T39_2,T39_3);\
p->Register(&StructName::T40_2,T40_3);\
return p;\
}\
}\
}\
};
